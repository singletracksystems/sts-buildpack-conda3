#!/usr/bin/env bash
#
#   Perform transformation steps for this Heroku app.
#
#   usage: bin/compile /tmp/build /app/cache /app/env
#
#   Reference: https://devcenter.heroku.com/articles/buildpack-api

#   Debugging.
#DISABLED:set -x

#   Configure environment.
set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

#   Display a section header.
function section() {
    echo
    echo "-----> $1"
}

#   Indent output send to stdout.
function indent() {
  sed -u 's/^/       /'
}

#   Remove a directory tree.
function rmtree() {
    dir_name=$1
    if [ -d "${dir_name}" ]; then
        echo "WARNING: found an existing directory ${dir_name}, removing it"
        rm -rf ${dir_name} | indent
    fi | indent
}

function export_env_dir() {
    env_dir=$1
    if [ -d "$env_dir" ]; then
        for name in $(ls ${env_dir}); do
            echo "$name"
            export "$name=$(cat ${env_dir}/${name})"
        done
    fi
}

section "running build"

#   Script paths.
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

#   Build path (directory contents will form the home directory on the deployed app).
BUILD_DIR=${1:-}

#   Location for build artifacts (will be persisted between builds).
CACHE_DIR=${2:-}

#   Directory containing a file for each of the app's configuration variables.
ENV_DIR=${3:-}

#   Introduce configuration settings to environment.
#DISABLED:export_env_dir $ENV_DIR

VENDOR_DIR="${CACHE_DIR}/vendor"
CONDA_INSTALLER="${VENDOR_DIR}/Miniconda3-py38_4.10.3-Linux-x86_64.sh"
APP_ROOT_DIR='/app'
CONDA_ENV_SETUP_FILE="${BUILD_DIR}/environment.yml"
CONDA_ROOT_DIR="${APP_ROOT_DIR}/miniconda"
CONDA_BIN_DIR="${CONDA_ROOT_DIR}/bin"
ENV_NAME='root'

#   Add conda to path.
export PATH=${CONDA_BIN_DIR}:$PATH

section "checking setup"

echo "shell aliases" | indent
alias | indent
echo "script variables" | indent
echo
( set -o posix ; set ) | egrep '^.*_(DIR|FILE|NAME|INSTALLER)=' | indent

#   Check requirements file.
if [ ! -s "${CONDA_ENV_SETUP_FILE}" ]; then
    echo "ERROR: ${CONDA_ENV_SETUP_FILE} is blank!"
    exit 1
fi | indent

section "caching build tools"

if [ ! -d "${VENDOR_DIR}" ]; then
    echo "creating cache for third party installers"
    mkdir -p ${VENDOR_DIR}
fi | indent

if [ ! -f "${CONDA_INSTALLER}" ]; then
    echo "transferring conda installer to cache"
    cp -Rv ${BP_DIR}/vendor/$(basename ${CONDA_INSTALLER}) ${VENDOR_DIR}
fi | indent

section "installing conda"

if [ ! -d "$APP_ROOT_DIR" ]; then
    echo "ERROR: application directory (/app) was not found!"
    exit 1
fi | indent

rmtree ${CONDA_ROOT_DIR}

bash ${CONDA_INSTALLER} -b -p ${CONDA_ROOT_DIR} 2>&1 | indent

echo $(conda -V 2>&1)" installed" | indent

section "installing packages into ${ENV_NAME} environment"

conda env update --quiet --name ${ENV_NAME} --file ${CONDA_ENV_SETUP_FILE} | indent

section "installing conda helper packages"

#   Required to enable the 'conda clean' command.
conda install --yes --quiet conda-build | indent

section "build summary"

#source ${CONDA_BIN_DIR}/activate ${ENV_NAME}
echo "Python executable:"$(which python) | indent
echo "Version: "$(python -V 2>&1) | indent
conda list | indent
#source ${CONDA_BIN_DIR}/deactivate

section "cleaning up conda caches"

conda clean --yes --tarballs --index-cache --packages | indent

section "relocating conda directory to build area"

rmtree ${BUILD_DIR}/miniconda
echo "moving built conda parent directory to build area"
mv -v ${CONDA_ROOT_DIR} ${BUILD_DIR} | indent

section "build completed"
